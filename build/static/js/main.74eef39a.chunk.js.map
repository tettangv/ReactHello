{"version":3,"sources":["user/Users.js","name/Names.js","post/Postss.js","App.js","serviceWorker.js","index.js"],"names":["Users","state","data","onChange","event","props","onNameChange","target","value","axios","get","result","this","setState","console","log","map","userss","id","name","email","Component","type","Postss","userId","title","body","App","Names","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAoDeA,E,2MAhDbC,MAAQ,CACNC,KAAM,I,EAeRC,SAAW,SAAAC,GAET,EAAKC,MAAMC,aAAaF,EAAMG,OAAOC,Q,mNAThBC,IAAMC,IACzB,8C,OADIC,E,OAGNC,KAAKC,SAAS,CAAEX,KAAMS,EAAOT,OAC7BY,QAAQC,IAAI,kB,qIAUZ,OADAD,QAAQC,IAAI,eAEV,6BACE,+BACE,+BACE,4BACE,kCACA,oCACA,uCAGJ,+BACGH,KAAKX,MAAMC,KAAKc,KAAI,SAAAC,GAAM,OACzB,4BACE,4BAAKA,EAAOC,IACZ,4BAAKD,EAAOE,MACZ,4BAAKF,EAAOG,kB,GAvCRC,aCgCLrB,E,2MA/BbC,MAAQ,CACNC,KAAM,I,EAeRC,SAAW,SAAAC,GAET,EAAKC,MAAMC,aAAaF,EAAMG,OAAOC,Q,mNAThBC,IAAMC,IACzB,8C,OADIC,E,OAGNC,KAAKC,SAAS,CAAEX,KAAMS,EAAOT,OAC7BY,QAAQC,IAAI,kB,qIAUZ,OADAD,QAAQC,IAAI,eAEV,6BACE,2BAAOO,KAAK,OAAOnB,SAAUS,KAAKT,gB,GA1BtBkB,aC8CLE,E,2MA7CbtB,MAAQ,CACNC,KAAM,I,mNAQeO,IAAMC,IACzB,8C,OADIC,E,OAGNC,KAAKC,SAAS,CAAEX,KAAMS,EAAOT,OAC7BY,QAAQC,IAAI,kB,qIAKZ,OADAD,QAAQC,IAAI,eAEV,6BACE,+BACE,+BACE,4BACE,sCACA,kCACA,qCACA,sCAGJ,+BACGH,KAAKX,MAAMC,KAAKc,KAAI,SAAAC,GAAM,OACzB,4BACE,4BAAKA,EAAOO,QACZ,4BAAKP,EAAOC,IACZ,4BAAKD,EAAOQ,OACZ,4BAAKR,EAAOS,iB,GApCPL,a,gBCuCNM,E,2MAhCb1B,MAAQ,CACNkB,KAAM,yB,EAGRb,aAAe,SAAAa,GACb,EAAKN,SAAS,CAAEM,KAAMA,K,wEAGd,IACAA,EAASP,KAAKX,MAAdkB,KACR,OACE,6BACE,sCAAYA,GACZ,6BACE,kBAACS,EAAD,CAAOT,KAAMA,EAAMb,aAAcM,KAAKN,gBAExC,6BACE,kBAAC,IAAD,CAAMuB,GAAG,KAAT,SAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,UAEF,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAW/B,IAChC,kBAAC,IAAD,CAAO8B,KAAK,UAAUC,UAAWR,S,GA3BvBF,aCGEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.74eef39a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Users extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  // }\r\n\r\n  async componentDidMount() {\r\n    const result = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/users\"\r\n    );\r\n    this.setState({ data: result.data });\r\n    console.log(\"Load User Data\");\r\n  }\r\n\r\n  onChange = event => {\r\n    //console.log(event.target.value);\r\n    this.props.onNameChange(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    console.log(\"render User\");\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td>Id</td>\r\n              <td>Name</td>\r\n              <td>email</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.data.map(userss => (\r\n              <tr>\r\n                <td>{userss.id}</td>\r\n                <td>{userss.name}</td>\r\n                <td>{userss.email}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Users extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  // }\r\n\r\n  async componentDidMount() {\r\n    const result = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/users\"\r\n    );\r\n    this.setState({ data: result.data });\r\n    console.log(\"Load User Data\");\r\n  }\r\n\r\n  onChange = event => {\r\n    //console.log(event.target.value);\r\n    this.props.onNameChange(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    console.log(\"render Name\");\r\n    return (\r\n      <div>\r\n        <input type=\"text\" onChange={this.onChange}></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Postss extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  // }\r\n\r\n  async componentDidMount() {\r\n    const result = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/posts\"\r\n    );\r\n    this.setState({ data: result.data });\r\n    console.log(\"Load Post Data\");\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render Post\");\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td>UserId</td>\r\n              <td>Id</td>\r\n              <td>Title</td>\r\n              <td>Body</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.data.map(userss => (\r\n              <tr>\r\n                <td>{userss.userId}</td>\r\n                <td>{userss.id}</td>\r\n                <td>{userss.title}</td>\r\n                <td>{userss.body}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Postss;\r\n","import React, { Component } from \"react\";\n//import logo, { ReactComponent } from \"./logo.svg\";\nimport \"./App.css\";\nimport Users from \"./user/Users\";\n//import { thisTypeAnnotation } from \"@babel/types\";\nimport Names from \"./name/Names\";\nimport Postss from \"./post/Postss\";\nimport { Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  state = {\n    name: \"Tet Tangvongsasiriwat\"\n  };\n\n  onNameChange = name => {\n    this.setState({ name: name });\n  };\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div>\n        <div>Hello {name}</div>\n        <div>\n          <Names name={name} onNameChange={this.onNameChange} />\n        </div>\n        <div>\n          <Link to=\"/\">Home</Link>\n        </div>\n        <div>\n          <Link to=\"/users\">Users</Link>\n        </div>\n        <div>\n          <Link to=\"/postss\">Posts</Link>\n        </div>\n        <Route path=\"/users\" component={Users}></Route>\n        <Route path=\"/postss\" component={Postss}></Route>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}