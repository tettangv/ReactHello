{"version":3,"sources":["lib/withRequest.js","user/Users.js","post/Postss.js","name/Names.js","chat/Message.js","chat/MessageList.js","chat/MessageForm.js","chat/Chatroom.js","chat/ChatroomCount.js","chat/ChatForm.js","App.js","serviceWorker.js","index.js"],"names":["url","WrappedComponents","state","data","axios","get","result","this","setState","props","Component","Users","console","log","map","userss","key","id","name","email","withRequest","Postss","post","userId","title","body","Message","message","member","text","MessageList","messages","MessageForm","onSubmit","e","preventDefault","onMessageSend","currentMember","onChange","target","value","type","Chatroom","socket","addMessage","emit","socketIOClient","on","location","to","ChatroomCount","count","handleCount","onClick","ChatForm","Form","FormGroup","Label","for","Input","placeholder","pathname","App","onNameChanges","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","toggle","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","tag","Link","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.970ec53a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default url => WrappedComponents =>\r\n  class extends Component {\r\n    state = {\r\n      data: []\r\n    };\r\n    async componentDidMount() {\r\n      const result = await axios.get(url);\r\n      this.setState({ data: result.data });\r\n      // console.log(\"Load User Data\");\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponents {...this.state} {...this.props} />;\r\n    }\r\n  };\r\n","import React, { Component } from \"react\";\r\n// import axios from \"axios\";\r\nimport withRequest from \"../lib/withRequest\";\r\n\r\nclass Users extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  // }\r\n\r\n  // async componentDidMount() {\r\n  //   const result = await axios.get(\r\n  //     \"https://jsonplaceholder.typicode.com/users\"\r\n  //   );\r\n  //   this.setState({ data: result.data });\r\n  //   console.log(\"Load User Data\");\r\n  // }\r\n\r\n  // onChange = event => {\r\n  //   //console.log(event.target.value);\r\n  //   this.props.onNameChange(event.target.value);\r\n  // };\r\n\r\n  render() {\r\n    console.log(\"render User\");\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td>Id</td>\r\n              <td>Name</td>\r\n              <td>email</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.data.map(userss => (\r\n              <tr key={userss.id}>\r\n                <td>{userss.id}</td>\r\n                <td>{userss.name}</td>\r\n                <td>{userss.email}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRequest(\"https://jsonplaceholder.typicode.com/users\")(Users);\r\n","import React, { Component } from \"react\";\r\n// import axios from \"axios\";\r\nimport withRequest from \"../lib/withRequest\";\r\n\r\nclass Postss extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  // }\r\n\r\n  // async componentDidMount() {\r\n  //   const result = await axios.get(\r\n  //     \"https://jsonplaceholder.typicode.com/posts\"\r\n  //   );\r\n  //   this.setState({ data: result.data });\r\n  //   console.log(\"Load Post Data\");\r\n  // }\r\n\r\n  render() {\r\n    console.log(\"render Post\");\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td>UserId</td>\r\n              <td>Id</td>\r\n              <td>Title</td>\r\n              <td>Body</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.data.map(post => (\r\n              <tr key={post.id}>\r\n                <td>{post.userId}</td>\r\n                <td>{post.id}</td>\r\n                <td>{post.title}</td>\r\n                <td>{post.body}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRequest(\"https://jsonplaceholder.typicode.com/posts\")(\r\n  Postss\r\n);\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Names extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state.data = null;\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const result = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/users\"\r\n    );\r\n    this.setState({ data: result.data });\r\n    console.log(\"Load User Data\");\r\n  }\r\n\r\n  onChange = event => {\r\n    //console.log(event.target.value);\r\n    this.props.onNameChanges(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    console.log(\"render Name\");\r\n    return (\r\n      <div>\r\n        <div>Hello permanent {this.props.name}</div>\r\n        <div>\r\n          <input type=\"text\" onChange={this.onChange}></input>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Names;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Message extends Component {\r\n  render() {\r\n    const { message } = this.props;\r\n    return (\r\n      <li>\r\n        <div>\r\n          <div>\r\n            {message.member} : {message.text}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\nimport Message from \"./Message\";\r\n\r\nclass MessageList extends Component {\r\n  render() {\r\n    const { messages } = this.props;\r\n    return messages.map(message => (\r\n      <ul>\r\n        <Message message={message} />\r\n      </ul>\r\n    ));\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass MessageForm extends Component {\r\n  state = {\r\n    text: \".0....\"\r\n  };\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    //send Message;\r\n    this.props.onMessageSend({\r\n      text: this.state.text,\r\n      member: this.props.currentMember\r\n    });\r\n    this.setState({ text: \"\" });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ text: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <input type=\"text\" value={this.state.text} onChange={this.onChange} />\r\n        <button>send</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageForm;\r\n","import React, { Component } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport MessageList from \"./MessageList\";\r\nimport MessageForm from \"./MessageForm\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Socket } from \"net\";\r\nimport { thisExpression } from \"@babel/types\";\r\n// import Message from \"./Message\";\r\n\r\nclass Chatroom extends Component {\r\n  state = {\r\n    socket: null,\r\n    messages: [\r\n      { text: \"Hi\", member: \"FutureSkill\" },\r\n      { text: \"Hi\", member: \"Mark\" },\r\n      { text: \"Good Bye\", member: \"FutureSkill\" },\r\n      { text: \"Bye\", member: \"Mark\" }\r\n    ]\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  //   const socket = socketIOClient(\"http://localhost:8080\");\r\n  //   this.setState({ socket: socket });\r\n  // }\r\n\r\n  componentDidMount() {\r\n    if (this.state.socket == null) {\r\n      const socket = socketIOClient(\"http://localhost:8080\");\r\n      socket.on(\"message\", message => {\r\n        this.addMessage(message);\r\n      });\r\n      this.setState({ socket: socket });\r\n    }\r\n  }\r\n\r\n  onMessageSend = message => {\r\n    this.addMessage(message);\r\n    // const { socket } = this.state;\r\n    this.state.socket.emit(\"emit\", { ...message });\r\n  };\r\n\r\n  addMessage = message => {\r\n    this.setState({ messages: [...this.state.messages, { ...message }] });\r\n  };\r\n\r\n  render() {\r\n    if (this.props.location.name == null) {\r\n      return <Redirect to=\"/chat\"></Redirect>;\r\n    } else {\r\n      const { name } = this.props.location;\r\n      return (\r\n        <div>\r\n          <MessageList messages={this.state.messages} />\r\n          <MessageForm\r\n            onMessageSend={this.onMessageSend}\r\n            currentMember={name}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Chatroom;\r\n","import React, { Component } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nclass ChatroomCount extends Component {\r\n  state = {\r\n    socket: null,\r\n    count: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    const socket = socketIOClient(\"localhost:8080\");\r\n    this.setState({ socket: socket });\r\n    // socket.emit(\"emit\", { data: \"test\" });\r\n    socket.on(\"count\", data => this.handleCount(data));\r\n  }\r\n\r\n  handleCount = data => {\r\n    this.setState({ count: data.count });\r\n  };\r\n\r\n  onClick = () => {\r\n    let { socket, count } = this.state;\r\n    count += 1;\r\n    this.setState({ count: count });\r\n    socket.emit(\"emit\", { count: count });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{this.state.count}</div>\r\n        <button onClick={this.onClick}>Click Me.</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatroomCount;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Link } from \"react-router-dom\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\n\r\nclass ChatForm extends Component {\r\n  state = {\r\n    name: \"\"\r\n  };\r\n  onChange = e => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n  render() {\r\n    const { name } = this.state;\r\n    return (\r\n      <Form>\r\n        <FormGroup>\r\n          <Label for=\"username\">Username</Label>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            id=\"username\"\r\n            placeholder=\"Please Enter your name\"\r\n            value={name}\r\n            onChange={this.onChange}\r\n          />\r\n        </FormGroup>\r\n\r\n        <Link to={{ pathname: \"/users\", name: name }}>Join</Link>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatForm;\r\n","import React, { Component } from \"react\";\r\n//import logo, { ReactComponent } from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Users from \"./user/Users\";\r\n//import { thisTypeAnnotation } from \"@babel/types\";\r\nimport Names from \"./name/Names\";\r\nimport Postss from \"./post/Postss\";\r\nimport { Route, Link } from \"react-router-dom\";\r\nimport Chatroom from \"./chat/Chatroom\";\r\nimport ChatroomCount from \"./chat/ChatroomCount\";\r\nimport ChatForm from \"./chat/ChatForm\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    name: \"Tet Tangvongsasiriwat\"\r\n  };\r\n\r\n  onNameChanges = name => {\r\n    this.setState({ name: name });\r\n  };\r\n\r\n  render() {\r\n    const { name } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">Home</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink href=\"/users\">User</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"/postss\">Post</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"/chat\">Chatroom</NavLink>\r\n              </NavItem>\r\n              <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                  Chat Options\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  <DropdownItem tag={Link} to=\"/countcount\">\r\n                    countroom\r\n                  </DropdownItem>\r\n                  <DropdownItem tag={Link} to=\"/chatroom\">\r\n                    Chatroom-1\r\n                  </DropdownItem>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n\r\n        {/* <div>Hello {name}</div>\r\n        <div>\r\n          <Names name={name} onNameChanges={this.onNameChanges} />\r\n        </div> */}\r\n        {/* <div>\r\n          <Link to=\"/\">Home</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/users\">Users...12</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/postss\">Posts..23</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/countcount\">countroom</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/chatroom\">chatroom</Link>\r\n        </div>\r\n        <div>\r\n          <Link to=\"/chat\">chat</Link>\r\n        </div> */}\r\n\r\n        <Route exact path=\"/users\" component={Users}></Route>\r\n        <Route path=\"/postss\" component={Postss}></Route>\r\n        <Route path=\"/chatroom\" component={Chatroom}></Route>\r\n        <Route path=\"/countcount\" component={ChatroomCount}></Route>\r\n        <Route path=\"/chat\" component={ChatForm}></Route>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}